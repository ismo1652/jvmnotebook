//
// Copyright (c) 1997, 2010, Oracle and/or its affiliates. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!


#include "incls/_precompiled.incl"
#include "incls/_ad_x86_32_misc.cpp.incl"

const RegMask &bytes_reverse_intNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &bytes_reverse_longNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &bytes_reverse_unsigned_shortNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &bytes_reverse_shortNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &countLeadingZerosINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &countLeadingZerosI_bsrNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &countLeadingZerosLNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &countLeadingZerosL_bsrNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &countTrailingZerosINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &countTrailingZerosLNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &popCountINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &popCountI_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &popCountLNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &popCountL_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadBNode::out_RegMask() const { return (X_REG_mask); }
const RegMask &loadB2LNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadUBNode::out_RegMask() const { return (X_REG_mask); }
const RegMask &loadUB2LNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadUB2L_immI8Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadSNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadS2BNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadS2LNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadUSNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadUS2BNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadUS2LNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadUS2L_immI_255Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadUS2L_immI16Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadI2BNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadI2UBNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadI2SNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadI2USNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadI2LNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadI2L_immI_255Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadI2L_immI_65535Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadI2L_immINode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadUI2LNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadLNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadL_volatileNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &loadLX_volatileNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &loadLX_reg_volatileNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadRangeNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadPNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadKlassNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadDNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &loadXDNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &loadXD_partialNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &loadXNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &loadFNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &loadA8BNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &loadA4SNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &loadA4CNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &load2IUNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &loadA2FNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &leaP8Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &leaP32Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &leaPIdxOffNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &leaPIdxScaleNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &leaPIdxScaleOffNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadConINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadConI0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadConPNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadConLNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadConL0Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadConFNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &loadConXNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &loadConX0Node::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &loadConDNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &loadConXDNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &loadConXD0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &loadSSINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadSSLNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &loadSSPNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadSSFNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &loadSSDNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &prefetchr0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchrNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchrNTANode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchrT0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchrT2Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchw0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchwNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchwNTANode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchwT0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &prefetchwT2Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeCNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeLNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeL2INode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeL_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeLX_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeLX_reg_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storePNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeImmINode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeImmI16Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeImmPNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeImmBNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeA8BNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeA4CNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeA2INode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeImmCMNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeDNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeD_roundedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeXDNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeXNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeA2FNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeFNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeF_roundedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeF_DroundedNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeF_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeX_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &storeSSINode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &storeSSPNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &storeSSLNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &membar_acquireNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_acquire_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_releaseNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_release_lockNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &unnecessary_membar_volatileNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &castX2PNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &castP2XNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovI_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovI_regUNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovI_regUCFNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovI_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovI_memUNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovI_memUCFNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovP_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovP_reg_nonP6Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovP_regUNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovP_regUCFNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &fcmovD_regUNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &fcmovF_regUNode::out_RegMask() const { return (FLT_REG0_mask); }
const RegMask &fcmovD_regSNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &fcmovF_regSNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &fcmovX_regSNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &fcmovXD_regSNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &fcmovX_regUNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &fcmovX_regUCFNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &fcmovXD_regUNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &fcmovXD_regUCFNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &cmovL_regNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovL_regUNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovL_regUCFNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &addI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &addI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &incI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &leaI_eReg_immINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &leaP_eReg_immINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &decI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &addP_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &addP_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &addI_eReg_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &addI_eReg_mem_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &addI_mem_eRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addI_mem_eReg_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addI_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &incI_memNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &decI_memNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &checkCastPPNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &castPPNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &castIINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadPLockedNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadLLockedNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &loadLX_LockedNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &loadLX_reg_LockedNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &storePConditionalNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &storeIConditionalNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &storeLConditionalNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compareAndSwapLNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &compareAndSwapPNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &compareAndSwapINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &subI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &subI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &subI_eReg_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &subI_mem_eRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &subP_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &negI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &mulI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &mulI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &loadConL_low_onlyNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulI_imm_highNode::out_RegMask() const { return (EDX_REG_mask); }
const RegMask &mulI_imm_high_0Node::out_RegMask() const { return (EDX_REG_mask); }
const RegMask &mulI_imm_RShift_highNode::out_RegMask() const { return (EDX_REG_mask); }
const RegMask &mulI_imm_RShift_high_0Node::out_RegMask() const { return (EDX_REG_mask); }
const RegMask &mulI_mem_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &mulINode::out_RegMask() const { return (E_REG_mask); }
const RegMask &mulI_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &mulI2LNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulI2L_0Node::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulIS_eRegNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulIS_eReg_0Node::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulL_eRegNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulL_eReg_lhi0Node::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulL_eReg_rhi0Node::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulL_eReg_hi0Node::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &mulL_eReg_conNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &divI_eRegNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &divL_eRegNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &divModI_eReg_divmodNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &modI_eRegNode::out_RegMask() const { return (EDX_REG_mask); }
const RegMask &modL_eRegNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &shlI_eReg_1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &salI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &salI_eReg_CLNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &sarI_eReg_1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &sarI_mem_1Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &sarI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &sarI_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &sarI_eReg_CLNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &shrI_eReg_1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &shrI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &i2bNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &i2sNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &shrI_eReg_CLNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &andI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &andI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &andI_eReg_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &andI_eReg_mem_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &andI_mem_eRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &andI_mem_eReg_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &andI_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &orI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &orI_eReg_castP2XNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &orI_eReg_castP2X_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &orI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &orI_eReg_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &orI_eReg_mem_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &orI_mem_eRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &orI_mem_eReg_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &orI_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &rolI_eReg_imm1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rolI_eReg_imm8Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rolI_eReg_CLNode::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rolI_eReg_i1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rolI_eReg_i1_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rolI_eReg_i8Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rolI_eReg_i8_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rolI_eReg_Var_C0Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rolI_eReg_Var_C0_0Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rolI_eReg_Var_C32Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rolI_eReg_Var_C32_0Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rorI_eReg_imm1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rorI_eReg_imm8Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rorI_eReg_CLNode::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rorI_eReg_i1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rorI_eReg_i1_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rorI_eReg_i8Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rorI_eReg_i8_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &rorI_eReg_Var_C0Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rorI_eReg_Var_C0_0Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rorI_eReg_Var_C32Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &rorI_eReg_Var_C32_0Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &xorI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &xorI_eReg_im1Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &xorI_eReg_immNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &xorI_eReg_memNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &xorI_eReg_mem_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &xorI_mem_eRegNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &xorI_mem_eReg_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &xorI_mem_immNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &movI_nocopyNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &ci2bNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &convI2BNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &movP_nocopyNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cp2bNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &convP2BNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmpLTMaskNode::out_RegMask() const { return (ECX_REG_mask); }
const RegMask &cmpLTMask0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &cadd_cmpLTMaskNode::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &cadd_cmpLTMask_1Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &cadd_cmpLTMask_0Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &cadd_cmpLTMask_2Node::out_RegMask() const { return (NCX_REG_mask); }
const RegMask &addL_eRegNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &addL_eReg_immNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &addL_eReg_memNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &addL_eReg_mem_0Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &subL_eRegNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &subL_eReg_immNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &subL_eReg_memNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &negL_eRegNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &andL_eRegNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &andL_eReg_immNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &andL_eReg_memNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &andL_eReg_mem_0Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &orl_eRegNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &orl_eReg_immNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &orl_eReg_memNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &orl_eReg_mem_0Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &xorl_eRegNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &xorl_eReg_im1Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &xorl_eReg_immNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &xorl_eReg_memNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &xorl_eReg_mem_0Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shlL_eReg_1Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shlL_eReg_2Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shlL_eReg_3Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shlL_eReg_1_31Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shlL_eReg_32_63Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &salL_eReg_CLNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shrL_eReg_1_31Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shrL_eReg_32_63Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &shrL_eReg_CLNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &sarL_eReg_1_31Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &sarL_eReg_32_63Node::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &sarL_eReg_CLNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmpD_cc_P6Node::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpD_cc_P6CFNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpD_ccNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpD_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmpD_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmpXD_ccNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpXD_ccCFNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpXD_ccmemNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpXD_ccmemCFNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpXD_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmpXD_regmemNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &subD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &subD_reg_roundNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &subD_reg_memNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &absD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &absXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &negD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &negXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &addD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &addD_reg_roundNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addD_reg_memNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &addD_reg_mem_0Node::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &addD_mem_regNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addD_mem_reg_0Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &addD_reg_imm1Node::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &addD_reg_immNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &addD_reg_imm_roundNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &addXD_immNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &addXD_memNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &addXD_mem_0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &subXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &subXD_immNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &subXD_memNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &mulXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &mulXD_immNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &mulXD_memNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &mulXD_mem_0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &divXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &divXD_immNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &divXD_memNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &mulD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &strictfp_mulD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &mulD_reg_immNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &mulD_reg_memNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &mulD_reg_mem_0Node::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &mulD_reg_mem_ciscNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &mulD_reg_mem_cisc_0Node::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &addD_mulD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &addD_mulD_reg_0Node::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &subD_mulD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &divD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &strictfp_divD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &divD_reg_roundNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &modD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &modXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &sinD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &sinXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &cosD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &cosXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &tanD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &tanXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &atanD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &atanXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &sqrtD_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &powD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &powXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &expD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &expXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &log10D_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &log10XD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &logD_regNode::out_RegMask() const { return (DBL_REG0_mask); }
const RegMask &logXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &cmpF_cc_P6Node::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpF_cc_P6CFNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpF_ccNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpF_0Node::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmpF_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmpX_ccNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpX_ccCFNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpX_ccmemNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpX_ccmemCFNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpX_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmpX_regmemNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &subF24_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &subF_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF24_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &addX_immNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &addX_memNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &addX_mem_0Node::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &subX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &subX_immNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &subX_memNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &mulX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &mulX_immNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &mulX_memNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &mulX_mem_0Node::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &divX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &divX_immNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &divX_memNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &sqrtX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &sqrtX_memNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &sqrtXD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &sqrtXD_memNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &absF_regNode::out_RegMask() const { return (FLT_REG0_mask); }
const RegMask &absX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &negF_regNode::out_RegMask() const { return (FLT_REG0_mask); }
const RegMask &negX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &addF24_reg_memNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF24_reg_mem_0Node::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF_reg_memNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF_reg_mem_0Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF24_mem_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF24_mem_ciscNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF24_mem_cisc_0Node::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF24_mem_memNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF24_reg_immNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &addF_reg_immNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &mulF24_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &mulF_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &mulF24_reg_memNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &mulF24_reg_mem_0Node::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &mulF_reg_memNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &mulF_reg_mem_0Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &mulF24_mem_memNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &mulF24_reg_immNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &mulF_reg_immNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &mulF_reg_load1Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &mulF_reg_load1_0Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF_mulF_reg_load1Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF_mulF_reg_load1_1Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF_mulF_reg_load1_0Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF_mulF_reg_load1_2Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF_mulF_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &addF_mulF_reg_0Node::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &subF_divF_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &divF24_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &divF_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &modF24_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &modF_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &modX_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &roundFloat_mem_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &roundDouble_mem_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convD2F_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convD2X_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &convXD2X_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &convF2D_reg_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &convF2D_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convX2D_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &convX2XD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &convD2I_reg_regNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &convXD2I_reg_regNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &convD2L_reg_regNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &convXD2L_reg_regNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &convF2I_reg_regNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &convX2I_regNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &convF2L_reg_regNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &convX2L_reg_regNode::out_RegMask() const { return (EADX_REG_mask); }
const RegMask &convI2D_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &convI2XD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &convI2XD_memNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &convXI2XD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &convI2D_memNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &conv24I2F_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &convI2F_SSFNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convI2F_SSF_memNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convI2F_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &convI2F_memNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &convI2X_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &convXI2X_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &convI2L_regNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &convI2L_reg_zexNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &zerox_longNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &convL2D_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convL2XD_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &convL2X_regNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &convL2F_regNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &convL2I_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &MoveF2I_stack_regNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &MoveF2I_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveF2I_reg_stack_sseNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveF2I_reg_reg_sseNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &MoveI2F_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveI2F_stack_regNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &MoveI2F_stack_reg_sseNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &MoveI2F_reg_reg_sseNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &MoveD2L_stack_regNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &MoveD2L_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveD2L_reg_stack_sseNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveD2L_reg_reg_sseNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &MoveL2D_reg_stackNode::out_RegMask() const { return ((Compile::current()->FIRST_STACK_mask())); }
const RegMask &MoveL2D_stack_regNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &MoveL2D_stack_reg_sseNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &MoveL2D_stack_reg_sse_partialNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &MoveL2D_reg_reg_sseNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl8B_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl8B_eRegINode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl8B_immI0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl4S_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl4S_eRegINode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl4S_immI0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl4C_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl4C_eRegINode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl4C_immI0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl2I_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl2I_eRegINode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl2I_immI0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl2F_regNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl2F_regXNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &Repl2F_immXF0Node::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &rep_stosNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &string_compareNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &string_equalsNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &string_indexofNode::out_RegMask() const { return (EBX_REG_mask); }
const RegMask &array_equalsNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &compI_eRegNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compI_eReg_immNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compI_eReg_memNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &testI_regNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &testI_reg_immNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &testI_reg_memNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compU_eRegNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compU_eReg_immNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compU_eReg_memNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &testU_regNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compP_eRegNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compP_eReg_immNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compP_eReg_memNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &compP_mem_eRegNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &testP_regNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &testP_Reg_memNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &minI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &maxI_eRegNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &jumpXtndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpDirNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpConNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpLoopEndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpLoopEndUNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpLoopEndUCFNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpConUNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpConUCFNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpConUCF2Node::out_RegMask() const { return (RegMask::Empty); }
const RegMask &partialSubtypeCheckNode::out_RegMask() const { return (EDI_REG_mask); }
const RegMask &partialSubtypeCheck_vs_ZeroNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &jmpDir_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpCon_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpLoopEnd_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpLoopEndU_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpLoopEndUCF_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpConU_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpConUCF_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &jmpConUCF2_shortNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpL3_reg_regNode::out_RegMask() const { return (ESI_REG_mask); }
const RegMask &cmpL_zero_flags_LTGENode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpL_reg_flags_LTGENode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpL_LTGENode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmovLL_reg_LTGENode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovLL_mem_LTGENode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovII_reg_LTGENode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovII_mem_LTGENode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovPP_reg_LTGENode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovDD_reg_LTGENode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &cmovXDD_reg_LTGENode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &cmovFF_reg_LTGENode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &cmovXX_reg_LTGENode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &cmpL_zero_flags_EQNENode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpL_reg_flags_EQNENode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpL_EQNENode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmovLL_reg_EQNENode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovLL_mem_EQNENode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovII_reg_EQNENode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovII_mem_EQNENode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovPP_reg_EQNENode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovDD_reg_EQNENode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &cmovXDD_reg_EQNENode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &cmovFF_reg_EQNENode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &cmovXX_reg_EQNENode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &cmpL_zero_flags_LEGTNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpL_reg_flags_LEGTNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpL_LEGTNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmovLL_reg_LEGTNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovLL_mem_LEGTNode::out_RegMask() const { return (LONG_REG_mask); }
const RegMask &cmovII_reg_LEGTNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovII_mem_LEGTNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovPP_reg_LEGTNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &cmovDD_reg_LEGTNode::out_RegMask() const { return (DBL_REG_mask); }
const RegMask &cmovXDD_reg_LEGTNode::out_RegMask() const { return (XDB_REG_mask); }
const RegMask &cmovFF_reg_LEGTNode::out_RegMask() const { return (FLT_REG_mask); }
const RegMask &cmovXX_reg_LEGTNode::out_RegMask() const { return (XMM_REG_mask); }
const RegMask &CallStaticJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallStaticJavaHandleNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallDynamicJavaDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallRuntimeDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CallLeafNoFPDirectNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &RetNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &TailCalljmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &tailjmpIndNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &CreateExceptionNode::out_RegMask() const { return (EAX_REG_mask); }
const RegMask &RethrowExceptionNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &cmpFastLockNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &cmpFastUnlockNode::out_RegMask() const { return (INT_FLAGS_mask); }
const RegMask &safePoint_pollNode::out_RegMask() const { return (RegMask::Empty); }
const RegMask &tlsLoadPNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &TLSNode::out_RegMask() const { return (E_REG_mask); }
const RegMask &ShouldNotReachHereNode::out_RegMask() const { return (RegMask::Empty); }
// Check consistency of C++ compilation with ADLC options:
// Check adlc -DLINUX=1
#ifndef LINUX
#  error "LINUX must be defined"
#endif // LINUX
// Check adlc -D_GNU_SOURCE=1
#ifndef _GNU_SOURCE
#  error "_GNU_SOURCE must be defined"
#endif // _GNU_SOURCE
// Check adlc -DIA32=1
#ifndef IA32
#  error "IA32 must be defined"
#endif // IA32
// Check adlc -U_LP64
#ifdef _LP64
#  error "_LP64 must not be defined"
#endif // _LP64
